name: 同步库

on:
  schedule:
    - cron: '0 */3 * * *'  # 每 3 小时同步一次
  workflow_dispatch:  # 允许手动触发

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Git identity
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Add upstream repository
        run: |
          git remote add upstream https://github.com/fish2018/TGForwarder.git

      - name: Fetch upstream changes
        run: |
          git fetch upstream

      - name: Check if branches are the same
        id: branch-check
        run: |
          if git diff --quiet main upstream/main; then
            echo "Branches are the same, skipping sync."
            echo "skip_sync=true" >> $GITHUB_OUTPUT
          else
            echo "Branches are different, starting sync."
            echo "skip_sync=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if histories are related
        id: history-check
        if: steps.branch-check.outputs.skip_sync == 'false'
        run: |
          if git merge-base --is-ancestor upstream/main main; then
            echo "分支历史相关，可以合并"
            echo "allow_unrelated_histories=false" >> $GITHUB_OUTPUT
          else
            echo "分支历史不相关，需要强制合并"
            echo "allow_unrelated_histories=true" >> $GITHUB_OUTPUT
          fi

      - name: Merge upstream changes (if needed)
        if: steps.branch-check.outputs.skip_sync == 'false'
        run: |
          git checkout main
          if [[ "${{ steps.history-check.outputs.allow_unrelated_histories }}" == "true" ]]; then
            git merge upstream/main --allow-unrelated-histories
          else
            git merge upstream/main
          fi
          # 如果合并失败，尝试自动解决冲突
          if git diff --quiet; then
            echo "Merge successful."
          else
            echo "Merge conflict detected. Attempting to resolve..."
            git checkout --theirs .  # 选择上游仓库的更改
            git add .
            git commit -m "Resolve merge conflict by choosing upstream changes"
          fi

      - name: Push changes to origin (if needed)
        if: steps.branch-check.outputs.skip_sync == 'false'
        run: |
          git push origin main
